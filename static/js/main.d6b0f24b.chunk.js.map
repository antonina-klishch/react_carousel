{"version":3,"sources":["components/Carousel.tsx","App.tsx","index.tsx"],"names":["Carousel","images","step","frameSize","itemWidth","animationDuration","infinite","useState","indexStart","setIndexImage","styleCarousel","width","styleImages","transitionDuration","transform","className","style","map","image","index","src","alt","toString","type","disabled","onClick","stepShift","smile","size","isEnoughImages","length","moveBack","moveForward","App","state","handleChange","event","setState","prevState","target","name","value","this","method","htmlFor","id","min","max","onChange","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d6b0f24b.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './Carousel.scss';\n\ninterface Props {\n  images: string[],\n  itemWidth: number,\n  step: number,\n  frameSize: number,\n  animationDuration: number,\n  infinite: boolean,\n}\n\nconst Carousel: React.FC<Props> = ({\n  images,\n  step,\n  frameSize,\n  itemWidth,\n  animationDuration,\n  infinite,\n}) => {\n  const [indexStart, setIndexImage] = useState(0);\n\n  const moveForward = (stepShift: number, smile: string[], size: number) => {\n    const isEnoughImages = indexStart + stepShift >= smile.length - size;\n\n    if (isEnoughImages && !infinite) {\n      setIndexImage(smile.length - size);\n    } else if (isEnoughImages && infinite) {\n      setIndexImage(0);\n    } else {\n      setIndexImage(indexStart + stepShift);\n    }\n  };\n\n  const moveBack = (stepShift: number, smile: string[], size: number) => {\n    const isEnoughImages = indexStart - stepShift < 0;\n\n    if (isEnoughImages && !infinite) {\n      setIndexImage(0);\n    } else if (isEnoughImages && infinite) {\n      setIndexImage(smile.length - size);\n    } else {\n      setIndexImage(indexStart - stepShift);\n    }\n  };\n\n  const styleCarousel = {\n    width: `${itemWidth * frameSize}px`,\n  };\n\n  const styleImages = {\n    transitionDuration: `${animationDuration}ms`,\n    transform: `translateX(-${indexStart * itemWidth}px)`,\n  };\n\n  return (\n    <div\n      className=\"Carousel\"\n      style={styleCarousel}\n    >\n      <ul\n        className=\"Carousel__list\"\n\n      >\n        {images.map((image, index) => (\n          <li\n            key={image}\n            style={styleImages}\n          >\n            <img\n              src={image}\n              alt={index.toString()}\n              width={itemWidth}\n            />\n          </li>\n        ))}\n      </ul>\n      <div className=\"Carousel__buttons\">\n        <button\n          type=\"button\"\n          disabled={indexStart === 0 && !infinite}\n          onClick={() => {\n            moveBack(step, images, frameSize);\n          }}\n        >\n          Prev\n        </button>\n        <button\n          data-cy=\"next\"\n          type=\"button\"\n          disabled={indexStart > images.length - frameSize - 1 && !infinite}\n          onClick={() => {\n            moveForward(step, images, frameSize);\n          }}\n        >\n          Next\n        </button>\n      </div>\n\n    </div>\n  );\n};\n\nexport default Carousel;\n","import React from 'react';\nimport './App.scss';\nimport Carousel from './components/Carousel';\n\ninterface State {\n  images: string[],\n  itemWidth: number,\n  frameSize: number,\n  step: number,\n  animationDuration: number,\n  infinite: boolean,\n}\n\nclass App extends React.Component<{}, State> {\n  state = {\n    images: [\n      './img/1.png',\n      './img/2.png',\n      './img/3.png',\n      './img/4.png',\n      './img/5.png',\n      './img/6.png',\n      './img/7.png',\n      './img/8.png',\n      './img/9.png',\n      './img/10.png',\n    ],\n    itemWidth: 130,\n    frameSize: 3,\n    step: 3,\n    animationDuration: 1000,\n    infinite: false,\n  };\n\n  handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState(prevState => ({\n      ...prevState,\n      [event.target.name]: +event.target.value,\n    }));\n  };\n\n  render() {\n    const {\n      images,\n      itemWidth,\n      frameSize,\n      step,\n      animationDuration,\n      infinite,\n    } = this.state;\n\n    return (\n      <div className=\"App\">\n        {/* eslint-disable-next-line */}\n        <h1 data-cy=\"title\">Carousel with {images.length} images</h1>\n        <form method=\"post\" className=\"App__form\">\n\n          <label htmlFor=\"itemId\" className=\"itemWidth\">\n            ITEM WIDTH:\n            <input\n              id=\"itemId\"\n              type=\"number\"\n              name=\"itemWidth\"\n              value={itemWidth}\n              min={130}\n              max={1300}\n              onChange={this.handleChange}\n            />\n          </label>\n          <br />\n          <label htmlFor=\"frameId\" className=\"frameSize\">\n            FRAME SIZE:\n            <input\n              id=\"frameId\"\n              type=\"number\"\n              name=\"frameSize\"\n              value={frameSize}\n              min={1}\n              max={10}\n              onChange={this.handleChange}\n            />\n          </label>\n\n          <br />\n          <label htmlFor=\"stepId\" className=\"itemWidth\">\n            STEP:\n            <input\n              id=\"stepId\"\n              type=\"number\"\n              name=\"step\"\n              value={step}\n              min={1}\n              max={10}\n              onChange={this.handleChange}\n            />\n          </label>\n\n          <br />\n          <label htmlFor=\"durationId\" className=\"itemWidth\">\n            ANIMATION DURATION:\n            <input\n              id=\"durationId\"\n              type=\"number\"\n              name=\"animationDuration\"\n              value={animationDuration}\n              min={100}\n              max={100000}\n              step={100}\n              onChange={this.handleChange}\n            />\n          </label>\n\n          <br />\n          <label htmlFor=\"infiniteId\" className=\"itemWidth\">\n            INFINITE\n            <input\n              type=\"checkbox\"\n              id=\"infiniteId\"\n              name=\"infinite\"\n              onClick={() => {\n                this.setState({\n                  infinite: !infinite,\n                });\n              }}\n            />\n          </label>\n        </form>\n\n        <Carousel\n          images={images}\n          step={step}\n          frameSize={frameSize}\n          itemWidth={itemWidth}\n          animationDuration={animationDuration}\n          infinite={infinite}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}